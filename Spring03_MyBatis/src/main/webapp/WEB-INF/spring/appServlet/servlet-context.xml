<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- JNDI 데이터 소스 객체 얻어오는 설정 -->
	<beans:bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>	
	
	<!-- SqlSessionFactory 객체 -->
	<beans:bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation"
	value="classpath:com/gura/spring03/mybatis/Configuration.xml"/>
	</beans:bean>
	
	<!-- SqlSessionTemplate(SqlSession) 객체 -->
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
	</beans:bean>
	
	<!-- Transaction Manger 설정 -->
	<beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- Annotation 으로 transaction 처리 설정 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- Multipart 폼 전송을 처리하기 위한 bean -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10240000"/>		
	</beans:bean>
	
	<!-- Abstract View 가 동작하도록 설정 (bean 의 이름으로 view 페이지를 찾아갈 수 있도록 설정)-->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	
	<context:component-scan base-package="com.gura.spring03" />
	<!-- member 의 하위 패키지를 모두 scan 해서 bean 으로 객체 관리하기 -->
	<context:component-scan base-package="com.gura.spring03.member.*"/>
	<!-- users 의 하위 패키지를 모두 scan 해서 bean 으로 객체 관리하기 -->
	<context:component-scan base-package="com.gura.spring03.users.*"/>
	<!-- aspect 패키지를 scan 해서 bean 으로 객체 관리하기 -->
	<context:component-scan base-package="com.gura.spring03.aspect"/>
	<!-- file 의 하위 패키지를 모두 scan 해서 bean 으로 객체 관리하기 -->
	<context:component-scan base-package="com.gura.spring03.file.*"/>
	<!-- exception 패키지를 scan 해서 bean 으로 객체 관리하기 -->
	<context:component-scan base-package="com.gura.spring03.exception"/>
	<!-- cafe 의 하위 패키지를 모두 scan 해서 bean 으로 객체 관리하기 -->
	<context:component-scan base-package="com.gura.spring03.cafe.*"/>
	<!-- shop 의 하위 패키지를 모두 scan 해서 bean 으로 객체 관리하기 -->
	<context:component-scan base-package="com.gura.spring03.shop.*"/>
	<!-- Annotation 기반으로 AOP 를 적용하기 위한 설정 -->
	<aop:aspectj-autoproxy/>
	
	<!-- error 페이지 controller -->
	<view-controller path="/error/404.do" view-name="error/404"/>
	<view-controller path="/error/500.do" view-name="error/500"/>
</beans:beans>
